/* eslint-disable react-hooks/exhaustive-deps */
import React, { ReactElement, useEffect, useState } from 'react';
import SettingsMenu from '@components/menus/SettingsMenu';
import ProtectedLayout from '@layouts/ProtectedLayout';
import { NextPageWithLayout } from '@pages/_app';
import { changeUserPasswordMutation } from '@services/graphql/queries/user';
import { RootState } from '@store/configure-store';
import { setOTP } from '@store/reducers/user';
import { Button, Col, Form, Input, Row, message, Switch } from 'antd';
import Head from 'next/head';
import { useDispatch, useSelector } from 'react-redux';
import { useMutation } from 'urql';
import styles from './SecurityPage.module.less';

const SecurityPage: NextPageWithLayout = () => {
	const [form] = Form.useForm();
	const dispatch = useDispatch();
	const [submitting, setSubmitting] = useState(false);
	const userUseOTP = useSelector((state: RootState) => state.user.useOTP);
	const [isOTP, setIsOTP] = useState(true);
	const [, changeUserPassword] = useMutation(changeUserPasswordMutation);

	useEffect(() => {
		form.setFieldsValue({ useOTP: userUseOTP });
		setIsOTP(userUseOTP);
	}, [userUseOTP]);

	const handleFinish = async () => {
		const { useOTP, oldPassword, newPassword, confirmPassword } = form.getFieldsValue();

		if (newPassword !== confirmPassword) {
			message.error('Password mismatch!');
			return;
		}

		setSubmitting(true);

		try {
			const { error } = await changeUserPassword({
				useOTP,
				oldPassword,
				newPassword,
				confirmPassword,
			});

			if (error) {
				message.error(error.message);
				return;
			}

			message.success('Password changed!');

			form.resetFields();
			form.setFieldsValue({ useOTP: isOTP });
			dispatch(setOTP(isOTP));
			setSubmitting(false);
		} catch (error: any) {
			message.error(error.message);
			setSubmitting(false);
		}
	};

	return (
		<>
			<Head>
				<title>Security</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Row>
				<Col flex="1" className={styles.content}>
					<h2>Security settings</h2>
					<Form
						className={styles.form}
						form={form}
						initialValues={{ useOTP: userUseOTP }}
						layout="vertical"
						onFinish={handleFinish}
						requiredMark={false}>
						<Form.Item
							name="useOTP"
							style={{ flexDirection: 'row-reverse', alignItems: 'center' }}
							labelCol={{ span: 20 }}
							label="Use one time password (OTP)"
							valuePropName="checked">
							<Switch style={{ flex: 'unset' }} onChange={(value) => setIsOTP(value)} />
						</Form.Item>
						{!isOTP && (
							<>
								{!userUseOTP && (
									<Form.Item name="oldPassword" rules={[{ required: true, message: 'Please input an old password!' }]}>
										<Input.Password placeholder="Old password" />
									</Form.Item>
								)}
								<Form.Item name="newPassword" rules={[{ required: true, message: 'Please input a new password!' }]}>
									<Input.Password placeholder="New password" />
								</Form.Item>
								<Form.Item name="confirmPassword" rules={[{ required: true, message: 'Please confirm the password!' }]}>
									<Input.Password placeholder="Confirm password" />
								</Form.Item>
							</>
						)}
						<Form.Item>
							<Button type="primary" loading={submitting} htmlType="submit" style={{ marginTop: '15px' }}>
								Change password
							</Button>
						</Form.Item>
					</Form>
				</Col>
			</Row>
		</>
	);
};

SecurityPage.getLayout = (page: ReactElement) => (
	<ProtectedLayout title="Security" siderMenu={<SettingsMenu selectedItem="/settings/security" />}>
		{page}
	</ProtectedLayout>
);

export default SecurityPage;
